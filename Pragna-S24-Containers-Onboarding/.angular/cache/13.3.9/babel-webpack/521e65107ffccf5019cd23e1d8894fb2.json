{"ast":null,"code":"import { select } from '@ngrx/store';\nimport * as fromAuth from '../../core/store/auth/auth.reducer';\nimport { PageAnimations } from './page.animations';\nimport { filter, withLatestFrom, takeUntil, map } from 'rxjs/operators';\nimport { interval, Subject, combineLatest } from 'rxjs';\nimport { LoadData, Cleanup } from './+state/page.actions';\nimport { ModalComponent } from './modal/modal.component';\nimport { UpdateLongTermGoal } from '../../core/store/long-term-goal/long-term-goal.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./+state/page.selectors\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"../../core/firebase/firebase.service\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"./widget/widget.component\";\nimport * as i7 from \"@angular/common\";\nexport class PageComponent {\n  constructor(route, selectors, store, db, dialog) {\n    this.route = route;\n    this.selectors = selectors;\n    this.store = store;\n    this.db = db;\n    this.dialog = dialog; // --------------- ROUTE PARAMS & CURRENT USER ---------\n\n    /** The currently signed in user. */\n\n    this.currentUser$ = this.store.pipe(select(fromAuth.selectUser), filter(user => user !== null)); // --------------- DB ENTITY DATA ----------------------\n\n    /** Container id for selectors and loading. */\n\n    this.containerId = this.db.createId(); // --------------- DATA BINDING ------------------------\n\n    /** Raw time in milliseconds from 1970/01/01 00:00:00:000 **/\n\n    this.currentDateTime$ = interval(1000).pipe(map(() => Date.now()));\n    this.longTermGoal$ = this.selectors.selectLTGData(this.currentUser$, this.containerId); // --------------- EVENT BINDING -----------------------\n\n    /** Event for opening the edit modal. */\n\n    this.openEditModal$ = new Subject(); // --------------- HELPER FUNCTIONS AND OTHER ----------\n\n    /** Unsubscribe observable for subscriptions. */\n\n    this.unsubscribe$ = new Subject();\n  }\n\n  ngOnInit() {\n    // --------------- EVENT HANDLING ----------------------\n    console.log(this.longTermGoal$);\n    /** Handle openEditModal events. */\n\n    this.openEditModal$.pipe(withLatestFrom(this.longTermGoal$), takeUntil(this.unsubscribe$)).subscribe(([_, longTermGoal]) => {\n      console.log('modal opened');\n      this.dialogRef = this.dialog.open(ModalComponent, {\n        height: '310px',\n        width: '100%',\n        maxWidth: '500px',\n        data: {\n          longTermGoal: longTermGoal,\n          updateGoals: (goals, loading$) => {\n            this.saveGoals$.next({\n              goals,\n              loading$\n            });\n          }\n        },\n        panelClass: 'dialog-container'\n      });\n    }); // referenced Anusha's code\n\n    this.saveGoals$.pipe(takeUntil(this.unsubscribe$)).subscribe(({\n      goals,\n      loading$\n    }) => {\n      const actionSets = goals.map(updatedtext => {\n        // Define the action sets we'd like to dispatch\n        return {\n          action: new UpdateLongTermGoal(updatedtext.__id, {\n            oneYear: updatedtext.oneYear,\n            fiveYear: updatedtext.fiveYear\n          }, this.containerId)\n        };\n      }); // Dispatch an Action Flow\n\n      this.store.dispatch(new ActionFlow({\n        actionSets,\n        loading$\n      }));\n    }); // --------------- LOAD DATA ---------------------------\n    // Once everything is set up, load the data for the role.\n\n    combineLatest(this.currentUser$).pipe(takeUntil(this.unsubscribe$)).subscribe(([currentUser]) => {\n      this.store.dispatch(new LoadData({\n        currentUser\n      }, this.containerId));\n    });\n  }\n\n  ngOnDestroy() {\n    // Unsubscribe subscriptions.\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete(); // Unsubscribe from firebase connection from load and free up memoized selector values.\n\n    this.store.dispatch(new Cleanup(this.containerId));\n    this.selectors.cleanup(this.containerId);\n  }\n\n}\n\nPageComponent.ɵfac = function PageComponent_Factory(t) {\n  return new (t || PageComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.PageSelectors), i0.ɵɵdirectiveInject(i3.Store), i0.ɵɵdirectiveInject(i4.FirebaseService), i0.ɵɵdirectiveInject(i5.MatDialog));\n};\n\nPageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PageComponent,\n  selectors: [[\"app-page\"]],\n  decls: 3,\n  vars: 3,\n  consts: [[1, \"page-container\"], [3, \"goal\", \"editGoals\"]],\n  template: function PageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"app-widget\", 1);\n      i0.ɵɵlistener(\"editGoals\", function PageComponent_Template_app_widget_editGoals_1_listener() {\n        return ctx.openEditModal$.next();\n      });\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"goal\", i0.ɵɵpipeBind1(2, 1, ctx.longTermGoal$));\n    }\n  },\n  directives: [i6.WidgetComponent],\n  pipes: [i7.AsyncPipe],\n  styles: [\".page-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 100%;\\n  background-color: #ecedff;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2UuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHlCQUFBO0VBQ0EsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7QUFDRiIsImZpbGUiOiJwYWdlLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnBhZ2UtY29udGFpbmVyIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzNiwgMjM3LCAyNTUpO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbiJdfQ== */\"],\n  data: {\n    animation: PageAnimations\n  },\n  changeDetection: 0\n});","map":{"version":3,"sources":["/Users/pragna/Tech4Good/Web-Dev/containers-onboarding/longtermgoals-setup-uosnjl/src/app/main/page/page.component.ts"],"names":["select","fromAuth","PageAnimations","filter","withLatestFrom","takeUntil","map","interval","Subject","combineLatest","LoadData","Cleanup","ModalComponent","UpdateLongTermGoal","i0","i1","i2","i3","i4","i5","i6","i7","PageComponent","constructor","route","selectors","store","db","dialog","currentUser$","pipe","selectUser","user","containerId","createId","currentDateTime$","Date","now","longTermGoal$","selectLTGData","openEditModal$","unsubscribe$","ngOnInit","console","log","subscribe","_","longTermGoal","dialogRef","open","height","width","maxWidth","data","updateGoals","goals","loading$","saveGoals$","next","panelClass","actionSets","updatedtext","action","__id","oneYear","fiveYear","dispatch","ActionFlow","currentUser","ngOnDestroy","complete","cleanup","ɵfac","PageComponent_Factory","t","ɵɵdirectiveInject","ActivatedRoute","PageSelectors","Store","FirebaseService","MatDialog","ɵcmp","ɵɵdefineComponent","type","decls","vars","consts","template","PageComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","PageComponent_Template_app_widget_editGoals_1_listener","ɵɵpipe","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","ɵɵpipeBind1","directives","WidgetComponent","pipes","AsyncPipe","styles","animation","changeDetection"],"mappings":"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","sourcesContent":["import { select } from '@ngrx/store';\nimport * as fromAuth from '../../core/store/auth/auth.reducer';\nimport { PageAnimations } from './page.animations';\nimport { filter, withLatestFrom, takeUntil, map } from 'rxjs/operators';\nimport { interval, Subject, combineLatest } from 'rxjs';\nimport { LoadData, Cleanup } from './+state/page.actions';\nimport { ModalComponent } from './modal/modal.component';\nimport { UpdateLongTermGoal } from '../../core/store/long-term-goal/long-term-goal.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./+state/page.selectors\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"../../core/firebase/firebase.service\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"./widget/widget.component\";\nimport * as i7 from \"@angular/common\";\nexport class PageComponent {\n    constructor(route, selectors, store, db, dialog) {\n        this.route = route;\n        this.selectors = selectors;\n        this.store = store;\n        this.db = db;\n        this.dialog = dialog;\n        // --------------- ROUTE PARAMS & CURRENT USER ---------\n        /** The currently signed in user. */\n        this.currentUser$ = this.store.pipe(select(fromAuth.selectUser), filter((user) => user !== null));\n        // --------------- DB ENTITY DATA ----------------------\n        /** Container id for selectors and loading. */\n        this.containerId = this.db.createId();\n        // --------------- DATA BINDING ------------------------\n        /** Raw time in milliseconds from 1970/01/01 00:00:00:000 **/\n        this.currentDateTime$ = interval(1000).pipe(map(() => Date.now()));\n        this.longTermGoal$ = this.selectors.selectLTGData(this.currentUser$, this.containerId);\n        // --------------- EVENT BINDING -----------------------\n        /** Event for opening the edit modal. */\n        this.openEditModal$ = new Subject();\n        // --------------- HELPER FUNCTIONS AND OTHER ----------\n        /** Unsubscribe observable for subscriptions. */\n        this.unsubscribe$ = new Subject();\n    }\n    ngOnInit() {\n        // --------------- EVENT HANDLING ----------------------\n        console.log(this.longTermGoal$);\n        /** Handle openEditModal events. */\n        this.openEditModal$\n            .pipe(withLatestFrom(this.longTermGoal$), takeUntil(this.unsubscribe$))\n            .subscribe(([_, longTermGoal]) => {\n            console.log('modal opened');\n            this.dialogRef = this.dialog.open(ModalComponent, {\n                height: '310px',\n                width: '100%',\n                maxWidth: '500px',\n                data: {\n                    longTermGoal: longTermGoal,\n                    updateGoals: (goals, loading$) => {\n                        this.saveGoals$.next({ goals, loading$ });\n                    },\n                },\n                panelClass: 'dialog-container',\n            });\n        });\n        // referenced Anusha's code\n        this.saveGoals$\n            .pipe(takeUntil(this.unsubscribe$))\n            .subscribe(({ goals, loading$ }) => {\n            const actionSets = goals.map((updatedtext) => {\n                // Define the action sets we'd like to dispatch\n                return {\n                    action: new UpdateLongTermGoal(updatedtext.__id, {\n                        oneYear: updatedtext.oneYear,\n                        fiveYear: updatedtext.fiveYear,\n                    }, this.containerId),\n                };\n            });\n            // Dispatch an Action Flow\n            this.store.dispatch(new ActionFlow({\n                actionSets,\n                loading$,\n            }));\n        });\n        // --------------- LOAD DATA ---------------------------\n        // Once everything is set up, load the data for the role.\n        combineLatest(this.currentUser$)\n            .pipe(takeUntil(this.unsubscribe$))\n            .subscribe(([currentUser]) => {\n            this.store.dispatch(new LoadData({\n                currentUser,\n            }, this.containerId));\n        });\n    }\n    ngOnDestroy() {\n        // Unsubscribe subscriptions.\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n        // Unsubscribe from firebase connection from load and free up memoized selector values.\n        this.store.dispatch(new Cleanup(this.containerId));\n        this.selectors.cleanup(this.containerId);\n    }\n}\nPageComponent.ɵfac = function PageComponent_Factory(t) { return new (t || PageComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.PageSelectors), i0.ɵɵdirectiveInject(i3.Store), i0.ɵɵdirectiveInject(i4.FirebaseService), i0.ɵɵdirectiveInject(i5.MatDialog)); };\nPageComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PageComponent, selectors: [[\"app-page\"]], decls: 3, vars: 3, consts: [[1, \"page-container\"], [3, \"goal\", \"editGoals\"]], template: function PageComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"app-widget\", 1);\n        i0.ɵɵlistener(\"editGoals\", function PageComponent_Template_app_widget_editGoals_1_listener() { return ctx.openEditModal$.next(); });\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"goal\", i0.ɵɵpipeBind1(2, 1, ctx.longTermGoal$));\n    } }, directives: [i6.WidgetComponent], pipes: [i7.AsyncPipe], styles: [\".page-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 100%;\\n  background-color: #ecedff;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2UuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHlCQUFBO0VBQ0EsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7QUFDRiIsImZpbGUiOiJwYWdlLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnBhZ2UtY29udGFpbmVyIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzNiwgMjM3LCAyNTUpO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbiJdfQ== */\"], data: { animation: PageAnimations }, changeDetection: 0 });\n"]},"metadata":{},"sourceType":"module"}